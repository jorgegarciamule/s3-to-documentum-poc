<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:https="http://www.mulesoft.org/schema/mule/https"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd">
	
	<data-mapper:config name="JSON_To_Pojo"
		transformationGraphPath="json_to_pojo.grf" doc:name="JSON_To_Pojo" />
    <objectstore:config name="PartitionsStateConfig" persistent="true" doc:name="ObjectStore"/>
    <data-mapper:config name="Map_To_Submission_File__c" transformationGraphPath="map_to_submission_file__c.grf" doc:name="Map_To_Submission_File__c"/>
    <data-mapper:config name="Map_To_Submission_File__c_1" transformationGraphPath="map_to_submission_file__c_1.grf" doc:name="Map_To_Submission_File__c_1"/>
	<flow name="documentum-create-folder" doc:name="documentum-create-folder" processingStrategy="synchronous">
		<logger
			message="Creating folder: &quot;Submission_&quot; + payload.ParentSubmissionNumber in documentum"
			level="INFO" doc:name="Logger" />
        <set-variable variableName="ParentFolderId" value="#[payload.ParentFolderId]" doc:name="Set parent folder id"/>
		<set-payload
			value="{&quot;type&quot;: &quot;dm_folder&quot;, &quot;properties&quot;: { &quot;object_name&quot;: &quot;#[payload.FolderName]&quot;}}"
			doc:name="Set submission folder info" />

		<http:outbound-endpoint exchange-pattern="request-response"
			host="${documentum.rest.host}" port="${documentum.rest.port}"
			path="${documentum.rest.url}/folders/#[flowVars.ParentFolderId]/folders"
			method="POST" doc:name="Create submission folder in documentum">
			<message-properties-transformer>
				<add-message-property
					value="#['Basic '+ new String(org.apache.commons.codec.binary.Base64.encodeBase64('${documentum.username}:${documentum.password}'.getBytes()))]"
					key="Authorization" />
				<add-message-property value="application/vnd.emc.documentum+json"
					key="Accept" />
				<add-message-property value="application/vnd.emc.documentum+json"
					key="Content-Type" />
			</message-properties-transformer>
		</http:outbound-endpoint>
		<object-to-string-transformer doc:name="Object to String" />
		<data-mapper:transform config-ref="JSON_To_Pojo"
			doc:name="Documentum response to folder objectid" />
	</flow>
	<flow name="documentum-find-folder" doc:name="documentum-find-folder" processingStrategy="synchronous">
        <set-payload value="#[[ &quot;dql&quot;: &quot;select r_object_id from dm_folder where object_name = '&quot;+ payload.FolderName+&quot;' AND FOLDER('&quot;+payload.ParentFolderPath+&quot;')&quot; ]]" doc:name="Set query to find folder "/>
		<http:outbound-endpoint exchange-pattern="request-response"
			host="${documentum.rest.host}" port="${documentum.rest.port}"
			path="${documentum.rest.url}"
			method="POST" doc:name="Find folder in documentum">
			<message-properties-transformer>
				<add-message-property
					value="#['Basic '+ new String(org.apache.commons.codec.binary.Base64.encodeBase64('${documentum.username}:${documentum.password}'.getBytes()))]"
					key="Authorization" />
					<add-message-property key="Content-Type" value="application/x-www-form-urlencoded" />
			</message-properties-transformer>
		</http:outbound-endpoint>
        <set-payload value="#[json:/entries/[0]/content/properties/r_object_id]" doc:name="Get object id from response"/>
	</flow>
	
	<sub-flow name="documentum-add-document-file" doc:name="documentum-add-document-file">
		<component class="com.mule.poc.documentum.DocumentumCall"
			doc:name="Copy_of_Sent 
 			to documentum" />
	</sub-flow>
    <sub-flow name="documentum-create-filefolder" doc:name="documentum-create-filefolder">
        <choice doc:name="Choice">
            <when expression="#[payload.FileSizeInBytes &lt;= ${file.max.size}]">
                <logger message="Only one file part will be processed. " level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <enricher source="#[payload]" target="#[payload[&quot;PartialFolderId&quot;]]" doc:name="Message Enricher">
                    <flow-ref name="documentum-create-file-folder-item" doc:name="Crete folder for file parts"/>
                </enricher>
            </otherwise>
        </choice>
    </sub-flow>
    <flow name="documentum-process-file" doc:name="documentum-process-file">
        <vm:inbound-endpoint exchange-pattern="one-way" path="${vm.documentum.upload}" connector-ref="VMConfig" doc:name="VM"/>
        <enricher source="#[payload.id]" target="#[flowVars['jobid']]" doc:name="Message Enricher">
            <batch:execute name="file-batch-processing" doc:name="Batch Execute"/>
        </enricher>
    </flow>
    <batch:job name="file-batch-processing">
        <batch:threading-profile poolExhaustedAction="WAIT" maxThreadsActive="8" maxThreadsIdle="1" threadTTL="360000" threadWaitTimeout="300000"/>
        <batch:input>
            <set-variable variableName="OriginalFileItem" value="#[payload]" doc:name="Set original file item"/>
            <objectstore:store config-ref="PartitionsStateConfig" key="Progress#[payload.Id]" value-ref="#[[ &quot;Progress&quot;: 0 , &quot;Id&quot;: payload.Id, &quot;Total&quot;:  payload.FileSizeInBytes]]" overwrite="true" doc:name="Set progress data"/>
            <flow-ref name="documentum-create-filefolder" doc:name="Create file folder"/>
            <expression-component doc:name="Split data of file by parts"><![CDATA[// Create a new collection to store the list of data to retrieve the file by parts
aux =new ArrayList();

//maxSize = 10 *1024*1024; // 10MB
maxSize = ${file.max.size}; // 10bytes

if(payload.FileSizeInBytes <= maxSize){
		aux.add( { "fileName": payload.FileName,  "bytesFrom": 0, "bytesTo": (long)payload.FileSizeInBytes-1 , "relativeURL":payload.RelativeS3Url , "ParentFolderId":payload.ParentFolderId, "Progress": payload.FileSizeInBytesË™});
}else{
	for(long bytesFrom = 0; bytesFrom < payload.FileSizeInBytes; bytesFrom = (long)bytesFrom+maxSize ){	
			bytesTo = (long) (bytesFrom +maxSize  >payload.FileSizeInBytes   ? (payload.FileSizeInBytes - 1)  :  (bytesFrom +maxSize - 1));
			progress = bytesTo - bytesFrom+1;
			//System.out.println(String.format("Bytes from: %s to %s", bytesFrom, bytesTo));
			aux.add( { "fileName": String.format("part_%06d",  aux.size())   ,  "bytesFrom": bytesFrom, "bytesTo": bytesTo, "relativeURL":payload.RelativeS3Url, "ParentFolderId":payload.PartialFolderId, "Progress": progress });
	}
}


flowVars["DocumentumFileURL"] = "${documentum.submissions.folder.path}/Submission_" +payload.ParentSubmissionNumber + "/"+ payload.FileName;
payload = aux;








]]></expression-component>
        </batch:input>
        <batch:process-records>
            <batch:step name="get-file-from-amazon">
                <until-successful maxRetries="5" millisBetweenRetries="5000" doc:name="Until Successful" synchronous="true">
                    <processor-chain doc:name="Processor Chain">
                        <batch:set-record-variable variableName="fileData" value="#[[ &quot;FileName&quot;: payload.fileName, &quot;ParentFolderId&quot;: payload.ParentFolderId, &quot;Progress&quot;: payload.Progress]]" doc:name="Set file data"/>
                        <flow-ref name="amazons3-retrieve-file" doc:name="get file from amazon s3"/>
                        <flow-ref name="documentum-add-document-file" doc:name="add file to documentum"/>
                        <set-payload value="#[[&quot;Id&quot;: flowVars.OriginalFileItem.Id, &quot;Progress&quot;:  recordVars.fileData.Progress ]]" doc:name="Set info"/>
                        <vm:outbound-endpoint exchange-pattern="one-way" path="${vm.progress.refresh}" connector-ref="VMConfig" doc:name="Add progress"/>
                    </processor-chain>
                </until-successful>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            
            <async doc:name="Async">
            <objectstore:remove config-ref="PartitionsStateConfig" key="Progress#[flowVars.OriginalFileItem.Id]" ignoreNotExists="true" doc:name="Remove progress data"/>
            </async>
            <choice doc:name="Choice">
                <when expression="#[payload.loadedRecords &gt; 1 &amp;&amp; payload.failedRecords == 0]">
                    <set-payload value="#[[ &quot;State&quot;: &quot;PROCESSING&quot;, &quot;StateDescription&quot; : &quot;Transfer completed. Pending for Documentum processing&quot;, &quot;Id&quot; :  flowVars.OriginalFileItem.Id]]" doc:name="Set SFDC state data"/>
                    <flow-ref name="sfdc-update-status" doc:name="update SFDC status"/>
                    <flow-ref name="document-start-file-processing" doc:name="Trigger documentum processing for joining files"/>
                    <set-payload value="#[&quot;DocumentumFileURL&quot;: flowVars.DocumentumFileURL , &quot;SFDC_Id&quot;: flowVars.OriginalFileItem.Id]]" doc:name="Set Documetum file URL in Payload"/>
                    <objectstore:store config-ref="PartitionsStateConfig" key="Documentum#[flowVars.OriginalFileItem.Id]" value-ref="#[flowVars[&quot;DocumentumFileURL&quot;]]" doc:name="Enable documentum processing status check" overwrite="true"/>
                </when>
                <when expression="#[payload.loadedRecords == 1 &amp;&amp; payload.failedRecords == 0]">
                    <set-payload value="#[[ &quot;State&quot;: &quot;PROCESSED&quot;, &quot;StateDescription&quot; : &quot;The file was uploaded to documentum successfuly&quot;, &quot;Id&quot; :  flowVars.OriginalFileItem.Id]]" doc:name="Set SFDC state data"/>
                    <flow-ref name="sfdc-update-status" doc:name="UPDATE SFDC status"/>
                </when>
                <otherwise>
                    <logger message="Error processing the file" level="INFO" doc:name="Logger"/>
                </otherwise>
            </choice>
        </batch:on-complete>
    </batch:job>
    <flow name="sfdc-update-status" doc:name="sfdc-update-status" processingStrategy="synchronous">
        <data-mapper:transform config-ref="Map_To_Submission_File__c" doc:name="Map To Submission_File__c"/>
        <sfdc:update-single config-ref="SalesforceConfig" type="Submission_File__c" doc:name="Update submission file">
        </sfdc:update-single>
    </flow>
    <flow name="document-start-file-processing" doc:name="document-start-file-processing" processingStrategy="synchronous">
        <http:outbound-endpoint exchange-pattern="request-response" method="GET" address="http://${documentum.customrest.merge.url}?filePath=#[flowVars.DocumentumFileURL]&amp;md5=#[flowVars.OriginalFileItem.MD5]" doc:name="Trigger documentum processing"/>
        <object-to-string-transformer doc:name="Object to String"/>
<!--         <logger message="Response of Custom REST MERGE: #[ payload:java.lang.String]" level="INFO" doc:name="Logger"/> -->
    </flow>
    <sub-flow name="documentum-get-processing-status" doc:name="documentum-get-processing-status">
        <http:outbound-endpoint exchange-pattern="request-response" method="GET" address="http://${documentum.customrest.status.url}?filePath=#[payload]" doc:name="Get documentum processing status"/>
        <object-to-string-transformer doc:name="Object to String"/>
<!--         <logger message="Documentum processing status:#[payload]" level="INFO" doc:name="Logger"/> -->
    </sub-flow>
    <flow name="sfdc-status-trigger-update" doc:name="sfdc-status-trigger-update">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="${documentum.polling.frequency}"/>
            <objectstore:all-keys config-ref="PartitionsStateConfig" doc:name="Get pending jobs"/>
        </poll>
        <expression-component doc:name="Filter documentum check status"><![CDATA[newList = new ArrayList();

for(int i= 0; i < payload.size(); i++){
		if(payload[i].startsWith("Documentum")){
			newList.add(payload[i]);
		}
}

payload = newList;]]></expression-component>
        
        <foreach doc:name="For Each">
            <set-variable variableName="SFDCID" value="#[payload	.replace(&quot;Documentum&quot;, &quot;&quot;)]" doc:name="Set SFDC id"/>
            <objectstore:retrieve config-ref="PartitionsStateConfig" key="#[payload]" targetProperty="#[payload]" doc:name="Get stored information"/>
            <enricher source="#[payload]" target="#[flowVars[&quot;DPStatus&quot;]]" doc:name="Message Enricher">
                <flow-ref name="documentum-get-processing-status" doc:name="Get documentum status"/>
            </enricher>
            <choice doc:name="Choice">
                <when expression="#[flowVars.DPStatus == &quot;0 - Merge completed&quot;]">
                    <set-payload value="#[[  &quot;State&quot;: &quot;PROCESSED&quot;, &quot;StateDescription&quot; : &quot;Documentum:&quot; + flowVars.DPStatus, &quot;Id&quot; :  flowVars.SFDCID, &quot;CopiedToFDA&quot;: true ]]" doc:name="Set SFDC state PROCESSED"/>
                    <async doc:name="Async">
                        <objectstore:remove config-ref="PartitionsStateConfig" key="Documentum#[flowVars.SFDCID]" ignoreNotExists="true" doc:name="Remove processed item with error"/>
                    </async>
                    <flow-ref name="sfdc-update-documentum-status" doc:name="Update SFDC status"/>
                </when>
                <when expression="#[flowVars.DPStatus.startsWith(&quot;2&quot;)]">
                    <set-payload value="#[[  &quot;State&quot;: &quot;ERROR&quot;, &quot;StateDescription&quot; : &quot;Documentum:&quot; + flowVars.DPStatus, &quot;Id&quot; :  flowVars.SFDCID, &quot;CopiedToFDA&quot;: false ]]" doc:name="SFDC ERROR STATE"/>
                    <async doc:name="Async">
                        <objectstore:remove config-ref="PartitionsStateConfig" key="Documentum#[flowVars.SFDCID]" ignoreNotExists="true" doc:name="Copy_of_Remove processed item with error"/>
                    </async>
                    <flow-ref name="sfdc-update-documentum-status" doc:name="Update SFDC status"/>
                </when>
                <when expression="#[flowVars.DPStatus == &quot;1 - Status not found&quot;]">
                    <logger message="Pending for documentum processing" level="INFO" doc:name="Logger"/>
                </when>
                <otherwise>
                    <set-payload value="#[[  &quot;State&quot;: &quot;PROCESSING&quot;, &quot;StateDescription&quot; : &quot;Documentum:&quot; + flowVars.DPStatus, &quot;Id&quot; :  flowVars.SFDCID ]]" doc:name="Set SFDC state PENDING"/>
                    <flow-ref name="sfdc-update-documentum-status" doc:name="Update SFDC status"/>
                </otherwise>
            </choice>
        </foreach>
    </flow>
    <sub-flow name="sfdc-update-documentum-status" doc:name="sfdc-update-documentum-status">
        <data-mapper:transform config-ref="Map_To_Submission_File__c_1" doc:name="Map To Submission_File__c"/>
        <sfdc:update-single config-ref="SalesforceConfig" type="Submission_File__c" doc:name="Salesforce">
        </sfdc:update-single>
<!--         <logger message="Salesforce: #[payload]" level="INFO" doc:name="Logger"/> -->
    </sub-flow>
    <sub-flow name="documentum-create-file-folder-item" doc:name="documentum-create-file-folder-item">
        <set-variable variableName="SubmissionFolderName" value="Submission_#[payload.ParentSubmissionNumber]" doc:name="Set Submission foldername"/>
        <set-payload value="#[[ &quot;ParentFolderPath&quot;: &quot;/Submissions/&quot; + flowVars.SubmissionFolderName	 , &quot;FolderName&quot; : payload.FileName, &quot;ParentFolderId&quot; : payload.ParentFolderId]]" doc:name="Set folder to search"/>
        <enricher source="#[payload]" target="#[payload[&quot;CurrentFolderId&quot;]]" doc:name="Message Enricher">
            <flow-ref name="documentum-find-folder" doc:name="Find folder id in documentum"/>
        </enricher>
        <choice doc:name="Check if directory already exists">
            <when expression="#[payload[&quot;CurrentFolderId&quot;] != NullPayload.getInstance()]">
                <set-payload value="#[payload[&quot;CurrentFolderId&quot;]]" doc:name="Set Payload"/>
                <logger message="Existing file parts folder with id: #[payload]" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <flow-ref name="documentum-create-folder" doc:name="Create partial folder in documentum"/>
            </otherwise>
        </choice>
    </sub-flow>
</mule>
