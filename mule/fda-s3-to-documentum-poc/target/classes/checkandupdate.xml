<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
    <data-mapper:config name="Map_To_Submission_File__c2" transformationGraphPath="map_to_submission_file__c_2.grf" doc:name="Map_To_Submission_File__c"/>
    <flow name="transfer-progress" doc:name="transfer-progress" processingStrategy="synchronous">
        <vm:inbound-endpoint exchange-pattern="one-way" path="${vm.progress.refresh}" connector-ref="VMConfig" doc:name="VM"/>
        <set-variable variableName="Data" value="#[payload]" doc:name="Set data"/>
        <objectstore:retrieve config-ref="ProgressDataConfig" key="#[flowVars.Data.Id]" doc:name="Get current progress value"/>
        <enricher source="#[payload]" target="#[payload.Progress]" doc:name="Message Enricher">
            <set-payload value="#[payload.Progress + flowVars.Data.Progress]" doc:name="Add Progress"/>
        </enricher>
        <objectstore:store config-ref="ProgressDataConfig" key="#[flowVars.Data.Id]" value-ref="#[payload]" overwrite="true" doc:name="Save current progress value"/>
    </flow>
    <flow name="transfer-progress-update-sfdc" doc:name="transfer-progress-update-sfdc">
        <poll doc:name="Poll">
            <fixed-frequency-scheduler frequency="${progress.polling.frequency}"/>
            <objectstore:all-keys config-ref="ProgressDataConfig" doc:name="Get keys of progress status"/>
        </poll>
        <expression-component doc:name="Expression"><![CDATA[aux = new ArrayList();

for(int i = 0; i < payload.size(); i++){
	if(!payload[i].startsWith("Documentum")){
		aux.add(payload[i]);
	}
}

payload = aux;]]></expression-component>
        <foreach doc:name="For Each">
            <objectstore:retrieve config-ref="ProgressDataConfig" key="#[payload]" doc:name="Get progress value"/>
            <choice doc:name="Choice">
                <when expression="#[payload != NullPayload.getInstance()]">
                    <scripting:component doc:name="Set progress data">
                        <scripting:script engine="Groovy"><![CDATA[progressBytes= (double)(payload.Progress == null ? 0 : payload.Progress);
totalBytes= (double)(payload.Total == null ? 0 : payload.Total);


if(progressBytes > totalBytes){
	progressBytes = totalBytes;
}

values = [ "GB", "MB", "KB"]

progressMessage = String.format("%f of %f Bytes", progressBytes, totalBytes);

for(i = 3; i >= 1; i--){
	total = Math.pow(1024L,i);
    if(totalBytes >= total){
      progressMessage = String.format("%.2f of %.2f %s", progressBytes / total, totalBytes / total, values[3-i]);
     	break;
  }
}


payload = [ "Id" : payload.Id, "StatusMessage": progressMessage];]]></scripting:script>
                    </scripting:component>
                    <data-mapper:transform config-ref="Map_To_Submission_File__c2" doc:name="Map To Submission_File__c"/>
                    <sfdc:update-single config-ref="SalesforceConfig" type="Submission_File__c" doc:name="Salesforce"/>
                </when>
                <otherwise>
                    <logger message="The file was already uploaded" level="WARN" doc:name="Logger"/>
                </otherwise>
            </choice>
        </foreach>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="Error trying to refresh SFDC progress status" level="WARN" doc:name="Logger"/>
        </catch-exception-strategy>
    </flow>
</mule>
