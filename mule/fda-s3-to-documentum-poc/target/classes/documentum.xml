<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:https="http://www.mulesoft.org/schema/mule/https"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.2"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">

	<data-mapper:config name="JSON_To_Pojo"
		transformationGraphPath="json_to_pojo.grf" doc:name="JSON_To_Pojo" />
	<objectstore:config name="PartitionsStateConfig"
		persistent="true" doc:name="ObjectStore" />
	<data-mapper:config name="Map_To_Submission_File__c"
		transformationGraphPath="map_to_submission_file__c.grf" doc:name="Map_To_Submission_File__c" />
	<data-mapper:config name="Map_To_Submission_File__c_1"
		transformationGraphPath="map_to_submission_file__c_1.grf" doc:name="Map_To_Submission_File__c_1" />
	<objectstore:config name="ProgressDataConfig"
		persistent="true" doc:name="ObjectStore" />
    <http:connector name="Documentum_HTTP_HTTPS" cookieSpec="netscape" validateConnections="true" sendBufferSize="0" receiveBufferSize="0" receiveBacklog="0" clientSoTimeout="10000" serverSoTimeout="10000" socketSoLinger="0" doc:name="HTTP-HTTPS"/>

	
	<flow name="documentum-create-folder" doc:name="documentum-create-folder"
		processingStrategy="synchronous">
		<set-variable variableName="ParentFolderId" value="#[payload.ParentFolderId]"
			doc:name="Set parent folder id" />
		<set-payload
			value="{&quot;type&quot;: &quot;dm_folder&quot;, &quot;properties&quot;: { &quot;object_name&quot;: &quot;#[payload.FolderName]&quot;}}"
			doc:name="Set submission folder info" />

		<http:outbound-endpoint exchange-pattern="request-response"
			host="${documentum.rest.host}" port="${documentum.rest.port}"
			path="${documentum.rest.url}/folders/#[flowVars.ParentFolderId]/folders"
			method="POST" doc:name="Create submission folder in documentum" connector-ref="Documentum_HTTP_HTTPS">
			<message-properties-transformer>
				<add-message-property
					value="#['Basic '+ new String(org.apache.commons.codec.binary.Base64.encodeBase64('${documentum.username}:${documentum.password}'.getBytes()))]"
					key="Authorization" />
				<add-message-property value="application/vnd.emc.documentum+json"
					key="Accept" />
				<add-message-property value="application/vnd.emc.documentum+json"
					key="Content-Type" />
			</message-properties-transformer>
		</http:outbound-endpoint>
		<object-to-string-transformer doc:name="Object to String" />
		<data-mapper:transform config-ref="JSON_To_Pojo"
			doc:name="Documentum response to folder objectid" />
	</flow>
	<flow name="documentum-find-folder" doc:name="documentum-find-folder"
		processingStrategy="synchronous">
		<set-payload
			value="#[[ &quot;dql&quot;: &quot;select r_object_id from dm_folder where object_name = '&quot;+ payload.FolderName+&quot;' AND FOLDER('&quot;+payload.ParentFolderPath+&quot;')&quot; ]]"
			doc:name="Set query to find folder " />
		<http:outbound-endpoint exchange-pattern="request-response"
			host="${documentum.rest.host}" port="${documentum.rest.port}" path="${documentum.rest.url}"
			method="POST" doc:name="Find folder in documentum" connector-ref="Documentum_HTTP_HTTPS">
			<message-properties-transformer>
				<add-message-property
					value="#['Basic '+ new String(org.apache.commons.codec.binary.Base64.encodeBase64('${documentum.username}:${documentum.password}'.getBytes()))]"
					key="Authorization" />
				<add-message-property key="Content-Type"
					value="application/x-www-form-urlencoded" />
			</message-properties-transformer>
		</http:outbound-endpoint>
		<set-payload value="#[json:/entries/[0]/content/properties/r_object_id]"
			doc:name="Get object id from response" />
	</flow>

	<flow name="documentum-add-document-file" doc:name="documentum-add-document-file" processingStrategy="synchronous">
        <logger message="uploading part to documentum" level="INFO" doc:name="Logger"/>
		<component class="com.mule.poc.documentum.DocumentumCall"
			doc:name="Copy_of_Sent 
 			to documentum" />

        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="Error uploading file to documentum" level="INFO" doc:name="Logger"/>
            <scripting:component doc:name="Groovy">
                <scripting:script engine="Groovy"><![CDATA[throw new java.lang.RuntimeException("Error uploading file to documentum");]]></scripting:script>
            </scripting:component>
        </catch-exception-strategy>	</flow>
	<sub-flow name="documentum-create-filefolder" doc:name="documentum-create-filefolder">
		<choice doc:name="Choice">
			<when expression="#[payload.FileSizeInBytes &lt;= ${file.max.size}]">
				<logger message="Only one file part will be processed. "
					level="INFO" doc:name="Logger" />
			</when>
			<otherwise>
				<enricher source="#[payload]" target="#[payload[&quot;PartialFolderId&quot;]]"
					doc:name="Message Enricher">
					<flow-ref name="documentum-create-file-folder-item"
						doc:name="Crete folder for file parts" />
				</enricher>
			</otherwise>
		</choice>
	</sub-flow>
	<flow name="documentum-process-file" doc:name="documentum-process-file"
		processingStrategy="synchronous">
		<vm:inbound-endpoint exchange-pattern="one-way"
			path="${vm.documentum.upload}" connector-ref="VMConfig" doc:name="VM" />
		<set-variable variableName="OriginalFileItem" value="#[payload]"
			doc:name="Set original file item" />
		<set-variable variableName="BigFile"
			value="#[payload.FileSizeInBytes &gt; ${file.max.size}]" doc:name="Variable" />
		<choice doc:name="Choice">
			<when expression="#[BigFile]">
				<objectstore:store config-ref="ProgressDataConfig"
					key="#[payload.Id]"
					value-ref="#[[ &quot;Progress&quot;: 0 , &quot;Id&quot;: payload.Id, &quot;Total&quot;:  payload.FileSizeInBytes]]"
					overwrite="true" doc:name="Set progress data" />
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger" />
			</otherwise>
		</choice>
        <flow-ref name="documentum-create-filefolder" doc:name="Create file folder"/>
        <scripting:component doc:name="Split data of file by parts">
            <scripting:script engine="Groovy"><![CDATA[// Create a new collection to store the list of data to retrieve the file by parts
aux =new ArrayList();

maxSize = ${file.max.size}; // 10bytes

			if( payload.FileSizeInBytes == null){
	throw new RuntimeException("payload.FileSizeInBytes cannot be null");
}

if(payload.FileSizeInBytes <= maxSize){
		aux.add( [ "fileName": payload.FileName,  "bytesFrom": 0, "bytesTo": (long)payload.FileSizeInBytes-1 , "relativeURL":payload.RelativeS3Url , "ParentFolderId":payload.ParentFolderId, "Progress": payload.FileSizeInBytes]);
}else{
	for(long bytesFrom = 0; bytesFrom < payload.FileSizeInBytes; bytesFrom = (long)bytesFrom+maxSize ){	
			bytesTo = (long) (bytesFrom +maxSize  >payload.FileSizeInBytes   ? (payload.FileSizeInBytes - 1)  :  (bytesFrom +maxSize - 1));
			progress = (double)(bytesTo - bytesFrom+1);

			if(progress == null){
				System.out.println(String.format("Progress: %s", progress));
			}

			aux.add( [ "fileName": String.format("part_%06d",  aux.size())   ,  "bytesFrom": bytesFrom, "bytesTo": bytesTo, "relativeURL":payload.RelativeS3Url, "ParentFolderId":payload.PartialFolderId, "Progress": progress ]);
	}
}

try{
flowVars["DocumentumFileURL"] = "${documentum.submissions.folder.path}/Submission_" +payload.ParentSubmissionNumber + "/"+ payload.FileName;
flowVars["RelativeS3Url"] = payload.RelativeS3Url;
flowVars["ParentFolderId"] = payload.ParentFolderId;
}
catch(Exception ex){
	flowVars["DocumentumFileURL"] = "";	
}

return aux;








]]></scripting:script>
        </scripting:component>
		<flow-ref name="documentumFlow1" doc:name="Flow Reference" />
	</flow>
	<flow name="documentumFlow1" doc:name="documentumFlow1"
		processingStrategy="synchronous">
		<foreach collection="#[payload]" doc:name="For Each"
			counterVariableName="index" rootMessageVariableName="rootCollection">
            <logger message="#[index] of #[rootCollection.payload.size()]"
    			level="INFO" doc:name="Logger" />
            <set-variable variableName="fileData" value="#[[ &quot;FileName&quot;: payload.fileName, &quot;ParentFolderId&quot;: payload.ParentFolderId, &quot;Progress&quot;: payload.Progress]]" doc:name="Variable"/>
			<until-successful maxRetries="20"
				millisBetweenRetries="10000" doc:name="Until Successful" synchronous="true">
                <flow-ref name="amazons3-retrieve-file" doc:name="get file from amazon s3" />
			</until-successful>
            <until-successful maxRetries="20" millisBetweenRetries="10000" synchronous="true" doc:name="Until Successful">
                <flow-ref name="documentum-add-document-file" doc:name="add file to documentum"/>
            </until-successful>
            <set-payload
    			value="#[[&quot;Id&quot;: flowVars.OriginalFileItem.Id, &quot;Progress&quot;:  flowVars.fileData.Progress ]]"
    			doc:name="Set info" />
            <vm:outbound-endpoint exchange-pattern="one-way"
    			path="${vm.progress.refresh}" connector-ref="VMConfig" doc:name="Add progress" />
		</foreach>
        <logger message="File #[flowVars.OriginalFileItem.FileName] uploaded to documentum. Pending for joining" level="INFO" doc:name="Logger"/>
        <until-successful maxRetries="20" millisBetweenRetries="10000" synchronous="true" doc:name="Until Successful">
            <choice doc:name="Choice">
                <when expression="BigFile">
                    <set-payload value="#[[ &quot;State&quot;: &quot;PROCESSING&quot;, &quot;StateDescription&quot; : &quot;Transfer completed. Pending for Documentum processing&quot;, &quot;Id&quot; :  flowVars.OriginalFileItem.Id, &quot;CopiedToFDA&quot; : false]]" doc:name="Set SFDC state data"/>
                    <flow-ref name="sfdc-update-status" doc:name="update SFDC status"/>
                    <flow-ref name="document-start-file-processing" doc:name="Trigger documentum processing for joining files"/>
                    <set-payload value="#[[&quot;DocumentumFileURL&quot;: flowVars.DocumentumFileURL , &quot;SFDC_Id&quot;: flowVars.OriginalFileItem.Id]]" doc:name="Set Documetum file URL in Payload"/>
                    <logger message="Started processing in Documentun for file: #[ flowVars[&quot;DocumentumFileURL&quot;]]" level="INFO" doc:name="Logger"/>
                    <objectstore:store config-ref="PartitionsStateConfig" key="Documentum#[flowVars.OriginalFileItem.Id]" value-ref="#[[ &quot;DocumentumFileURL&quot;: flowVars[&quot;DocumentumFileURL&quot;]]]" overwrite="true" doc:name="Enable documentum processing status check"/>
                    <objectstore:remove config-ref="ProgressDataConfig" key="#[flowVars.OriginalFileItem.Id]" ignoreNotExists="true" doc:name="Remove progress data"/>
                </when>
                <otherwise>
                    <set-payload value="#[[ &quot;State&quot;: &quot;PROCESSED&quot;, &quot;StateDescription&quot; : &quot;The file was uploaded to documentum successfuly&quot;, &quot;Id&quot; :  flowVars.OriginalFileItem.Id, &quot;CopiedToFDA&quot; : true]]" doc:name="Set SFDC state data"/>
                    <flow-ref name="sfdc-update-status" doc:name="UPDATE SFDC status"/>
                </otherwise>
            </choice>
        </until-successful>
        <logger message="END OF MAIN FLOW" level="INFO" doc:name="Logger"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="Error processing the file: #[flowVars.OriginalFileItem.FileName]" level="WARN" doc:name="Logger"/>
            <objectstore:remove config-ref="PartitionsStateConfig" key="Documentum#[flowVars.OriginalFileItem.Id]" ignoreNotExists="true" doc:name="ObjectStore"/>
            <objectstore:remove config-ref="ProgressDataConfig" key="#[flowVars.OriginalFileItem.Id]" ignoreNotExists="true" doc:name="Copy_of_ObjectStore"/>
            <set-payload value="#[[ &quot;State&quot;: &quot;ERROR&quot;, &quot;StateDescription&quot; : &quot;The process failed&quot;, &quot;Id&quot; :  flowVars.OriginalFileItem.Id, &quot;CopiedToFDA&quot; : false]]" doc:name="Copy_of_Set SFDC state data"/>
            <flow-ref name="sfdc-update-status" doc:name="Copy_of_UPDATE SFDC status"/>
        </catch-exception-strategy>
	</flow>
	<flow name="sfdc-update-status" doc:name="sfdc-update-status"
		processingStrategy="synchronous">
		<data-mapper:transform config-ref="Map_To_Submission_File__c"
			doc:name="Map To Submission_File__c" />
		<sfdc:update-single config-ref="SalesforceConfig"
			type="Submission_File__c" doc:name="Update submission file">
		</sfdc:update-single>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="ERRROR:sfdc-update-statuss" level="INFO" doc:name="Logger"/>
        </catch-exception-strategy>
	</flow>
	<flow name="document-start-file-processing" doc:name="document-start-file-processing"
		processingStrategy="synchronous">
		<http:outbound-endpoint exchange-pattern="request-response"
			method="GET"
			address="http://${documentum.customrest.merge.url}?filePath=#[flowVars.DocumentumFileURL]"
			doc:name="Trigger documentum processing" connector-ref="Documentum_HTTP_HTTPS"/>
		<object-to-string-transformer doc:name="Object to String" />
		<!-- <logger message="Response of Custom REST MERGE: #[ payload:java.lang.String]" 
			level="INFO" doc:name="Logger"/> -->
	</flow>
	<sub-flow name="documentum-get-processing-status" doc:name="documentum-get-processing-status">
		<http:outbound-endpoint exchange-pattern="request-response"
			method="GET"
			address="http://${documentum.customrest.status.url}?filePath=#[payload.DocumentumFileURL]"
			doc:name="Get documentum processing status" connector-ref="Documentum_HTTP_HTTPS"/>
		<object-to-string-transformer doc:name="Object to String" />
		<!-- <logger message="Documentum processing status:#[payload]" level="INFO" 
			doc:name="Logger"/> -->
	</sub-flow>
	<flow name="sfdc-status-trigger-update" doc:name="sfdc-status-trigger-update">
		<poll doc:name="Poll">
			<fixed-frequency-scheduler frequency="${documentum.polling.frequency}" />
			<objectstore:all-keys config-ref="PartitionsStateConfig"
				doc:name="Get pending jobs" />
		</poll>
		<expression-component doc:name="Expression"><![CDATA[aux = new ArrayList();

for(int i = 0; i < payload.size(); i++){
	if(payload[i].startsWith("Documentum")){
		aux.add(payload[i]);
	}
}

payload = aux;]]></expression-component>

		<foreach doc:name="For Each">
			<set-variable variableName="SFDCID"
				value="#[payload.replace(&quot;Documentum&quot;, &quot;&quot;)]"
				doc:name="Set SFDC id" />
			<objectstore:retrieve config-ref="PartitionsStateConfig"
				key="#[payload]" targetProperty="#[payload]" doc:name="Get stored information" />
			<enricher source="#[payload]" target="#[flowVars[&quot;DPStatus&quot;]]"
				doc:name="Message Enricher">
				<flow-ref name="documentum-get-processing-status" doc:name="Get documentum status" />
			</enricher>
			<choice doc:name="Choice">
				<when expression="#[flowVars.DPStatus == &quot;0 - Merge completed&quot;]">
                    <set-payload
						value="#[[  &quot;State&quot;: &quot;PROCESSED&quot;, &quot;StateDescription&quot; : &quot;Documentum:&quot; + flowVars.DPStatus, &quot;Id&quot; :  flowVars.SFDCID, &quot;CopiedToFDA&quot;: true ]]"
						doc:name="Set SFDC state PROCESSED" />
                    <flow-ref name="sfdc-update-documentum-status" doc:name="Update SFDC status" />
                    <objectstore:remove config-ref="PartitionsStateConfig" key="Documentum#[flowVars.SFDCID]" ignoreNotExists="true" doc:name="Remove stored information"/>
				</when>
				<when expression="#[flowVars.DPStatus.startsWith(&quot;2&quot;)]">
                    <set-payload value="#[[  &quot;State&quot;: &quot;ERROR&quot;, &quot;StateDescription&quot; : &quot;Documentum:&quot; + flowVars.DPStatus, &quot;Id&quot; :  flowVars.SFDCID, &quot;CopiedToFDA&quot;: false ]]" doc:name="SFDC ERROR STATE"/>
                    <flow-ref name="sfdc-update-documentum-status" doc:name="Copy_of_Update SFDC status"/>
                    <objectstore:remove config-ref="PartitionsStateConfig" key="Documentum#[flowVars.SFDCID]" ignoreNotExists="true" doc:name="Remove stored information"/>
				</when>
				<otherwise>
					<set-payload
						value="#[[  &quot;State&quot;: &quot;PROCESSING&quot;, &quot;StateDescription&quot; : &quot;Documentum:&quot; + flowVars.DPStatus, &quot;Id&quot; :  flowVars.SFDCID, &quot;CopiedToFDA&quot;: false ]]"
						doc:name="Copy_of_Set SFDC state PROCESSED" />
                    <flow-ref name="sfdc-update-documentum-status" doc:name="Copy_of_Update SFDC status"/>
				</otherwise>
			</choice>
		</foreach>
	</flow>
	<flow name="sfdc-update-documentum-status" doc:name="sfdc-update-documentum-status">
		<data-mapper:transform config-ref="Map_To_Submission_File__c_1"
			doc:name="Map To Submission_File__c" />
		<sfdc:update-single config-ref="SalesforceConfig"
			type="Submission_File__c" doc:name="Salesforce">
		</sfdc:update-single>
		<!-- <logger message="Salesforce: #[payload]" level="INFO" doc:name="Logger"/> -->
	</flow>
	<sub-flow name="documentum-create-file-folder-item" doc:name="documentum-create-file-folder-item">
		<set-variable variableName="SubmissionFolderName"
			value="Submission_#[payload.ParentSubmissionNumber]" doc:name="Set Submission foldername" />
		<set-payload
			value="#[[ &quot;ParentFolderPath&quot;: &quot;/Submissions/&quot; + flowVars.SubmissionFolderName	 , &quot;FolderName&quot; : payload.FileName, &quot;ParentFolderId&quot; : payload.ParentFolderId]]"
			doc:name="Set folder to search" />
		<enricher source="#[payload]" target="#[payload[&quot;CurrentFolderId&quot;]]"
			doc:name="Message Enricher">
			<flow-ref name="documentum-find-folder" doc:name="Find folder id in documentum" />
		</enricher>
		<choice doc:name="Check if directory already exists">
			<when
				expression="#[payload[&quot;CurrentFolderId&quot;] != NullPayload.getInstance()]">
				<set-payload value="#[payload[&quot;CurrentFolderId&quot;]]"
					doc:name="Set Payload" />
				<logger message="Existing file parts folder with id: #[payload]"
					level="INFO" doc:name="Logger" />
			</when>
			<otherwise>
				<flow-ref name="documentum-create-folder" doc:name="Create partial folder in documentum" />
			</otherwise>
		</choice>
	</sub-flow>
</mule>
